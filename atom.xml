<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[mu]]></title>
  <link href="http://mattjalexander.github.io/atom.xml" rel="self"/>
  <link href="http://mattjalexander.github.io/"/>
  <updated>2013-09-20T09:22:10-04:00</updated>
  <id>http://mattjalexander.github.io/</id>
  <author>
    <name><![CDATA[Matt Alexander]]></name>
    <email><![CDATA[mattjalexander@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Arigatō Toyoda]]></title>
    <link href="http://mattjalexander.github.io/blog/2013/09/20/arigato-toyoda/"/>
    <updated>2013-09-20T08:36:00-04:00</updated>
    <id>http://mattjalexander.github.io/blog/2013/09/20/arigato-toyoda</id>
    <content type="html"><![CDATA[<p>In case you missed it, Eiji Toyoda <a href="http://www.nytimes.com/2013/09/18/business/global/eiji-toyoda-promoter-of-toyota-way-dies-at-100.html?smid=tw-share&amp;_r=2&amp;">passed away</a> recently. Not only the architect of &ldquo;lean manufacturing&rdquo; and <a href="https://en.wikipedia.org/wiki/The_Toyota_Way">The Toyota Way</a>, his impact lives in the DevOps community.</p>

<p>[Gene Kim] explains <a href="http://itrevolution.com/the-three-ways-principles-underpinning-devops/">The Three Ways</a> better than I can, but in short:</p>

<ol>
<li>Systems Thinking &ndash; Don&rsquo;t think about the parts of the system, think of the entire pipeline. If <strong>only</strong> dev or <strong>only</strong> ops completes their job, there&rsquo;s still no useful product.</li>
<li>Amplify Feedback Loops &ndash; Improving communication and learning what to fix</li>
<li>Culture of Continual Experimentation and Learning &ndash; Applying what you learned in the Second Way</li>
</ol>


<p>Compare this to the main four sections of The Toyota Way:</p>

<ol>
<li>Long-term philosophy</li>
<li>The right process will produce the right results</li>
<li>Add value to the organization by developing your people</li>
<li>Continuously solving root problems drives organizational learning.</li>
</ol>


<p>This doesn&rsquo;t seem to map perfect, until you realize that working through sections meant:</p>

<ul>
<li>&ldquo;Long term philosophy&rdquo; turns out to mean the same thing as &ldquo;Systems Thinking&rdquo; once you actually understand the system.</li>
<li>Developing and respect people is central to amplifying feedback looks &mdash; if you&rsquo;re not listening (and this means REALLY listening) to your customers, providers, or neighbors, you can&rsquo;t improve on their complaints.</li>
<li>Kaizen is pretty much the exact definition of the willingness to continue to experiment and grow to improve the system and flow.</li>
</ul>


<p>Further watching and viewing can be found at:</p>

<ul>
<li><a href="http://www.amazon.com/Phoenix-Project-Helping-Business-ebook/dp/B00AZRBLHO/ref=sr_1_1?ie=UTF8&amp;qid=1379682018&amp;sr=8-1&amp;keywords=phoenix+project">The Phoenix Project</a></li>
<li><a href="http://www.amazon.com/Toyota-Way-Management-Manufacturer-ebook/dp/B000SEGIVS/ref=sr_1_1?ie=UTF8&amp;qid=1379682037&amp;sr=8-1&amp;keywords=the+toyota+way">The Toyota Way</a></li>
<li><a href="https://www.youtube.com/watch?v=3KpPBnEtRj4">DevOps Transformation</a>, Keynote Address at the 25th Large Installation System</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[yak shaving in windows]]></title>
    <link href="http://mattjalexander.github.io/blog/2013/09/18/yak-shaving-in-windows/"/>
    <updated>2013-09-18T21:51:00-04:00</updated>
    <id>http://mattjalexander.github.io/blog/2013/09/18/yak-shaving-in-windows</id>
    <content type="html"><![CDATA[<p><img class="right" src="images/debian.jpg" width="213" height="160"></p>

<h1>The Pain</h1>

<p>Given my work environment, I had totally forgotten the utter pain of attempting
to develop under Windows. THE HORROR. Sure, I&rsquo;ve got Virtualbox, and sure, I&rsquo;ve
got Vagrant. But hey, good luck running any useful vagrant commands with
<code>cmd.exe</code>, a shell with all of the latest technologies from 1803. Add in janky
graphics cards support from debian, opscode only providing chef servers for
Ubuntu(!) and RHEL, and I&rsquo;m back staring at a series of �s because I&rsquo;ve lost whatever juju
was between Windows, puTTY, and bash.</p>

<p>And let&rsquo;s not even get into bouncing from Apple&rsquo;s shortcuts, windows&#8217;, and
puttys, in under 8 hours. I basically just mash right click, middle, click,
CMD+V, and CTRL+V until something pastes.</p>

<p>Part of all this pain is, I think, why I&rsquo;ve been drawn to systems
administration and automation engineering &mdash; this friction of doing anything <strong>useful</strong> is as pointless
and tasteless as apps involving staring at mammary glands.</p>

<h1>The Joy</h1>

<p>On the plus side, importing <a href="https://raw.github.com/mattjalexander/dotfiles/master/manual/putty.reg">putty.reg</a> totally worked. This is a blinking, fluorescent light in the path; one day, I&rsquo;ll be done screwing with this uselessness.</p>

<h1>The Way Forward</h1>

<ul>
<li><p>I&rsquo;ve already ordered a larger SSD, fixing the mistake of being cheap, so I
should be able to just run a Virtualbox of a Real OS. Which apparently means
Ubuntu since Debian graphics continually whack out. And no, I&rsquo;m not installing
cygwin, that&rsquo;s just insane. The hilarity here, of course, is that my workflow
will inevitably mean running virtual machines inside of virtual machines, and
sometimes VMs inside of VMs inside of VMs. THE JOYS OF TESTING SYSTEMS AS A
WHOLE.</p></li>
<li><p>I&rsquo;ll need to install a Chef/Puppet/Ansible/something for my local network.
Chef is the obvious choice since that&rsquo;s what $CURRENT_WORK is into. Sadly, of
my physical machines, the only &ldquo;proper&rdquo; server is debian in i686, which
totally isn&rsquo;t provided by opscode. So, uh, either Enterprise chef or a chef
server inside a vm. Either is good enough for a toy home network.</p></li>
</ul>


<h1>PS</h1>

<p>I&rsquo;m still amazed that aspell is still the state-of-the-art for commandline spell
checking. vim and aspell will outlast all of us.</p>
]]></content>
  </entry>
  
</feed>
